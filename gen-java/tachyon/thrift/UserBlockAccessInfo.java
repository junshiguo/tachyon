/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package tachyon.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-05-06")
public class UserBlockAccessInfo implements org.apache.thrift.TBase<UserBlockAccessInfo, UserBlockAccessInfo._Fields>, java.io.Serializable, Cloneable, Comparable<UserBlockAccessInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UserBlockAccessInfo");

  private static final org.apache.thrift.protocol.TField FILE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("fileId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField BLOCK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("blockId", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField SIZE_BYTE_FIELD_DESC = new org.apache.thrift.protocol.TField("sizeByte", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField OPEN_TIME_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("openTimeMs", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField CLOSE_TIME_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("closeTimeMs", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField DURATION_FIELD_DESC = new org.apache.thrift.protocol.TField("duration", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField READ_SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("readSource", org.apache.thrift.protocol.TType.I32, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new UserBlockAccessInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new UserBlockAccessInfoTupleSchemeFactory());
  }

  public int fileId; // required
  public long blockId; // required
  public long sizeByte; // required
  public long openTimeMs; // required
  public long closeTimeMs; // required
  public long duration; // required
  public int readSource; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FILE_ID((short)1, "fileId"),
    BLOCK_ID((short)2, "blockId"),
    SIZE_BYTE((short)3, "sizeByte"),
    OPEN_TIME_MS((short)4, "openTimeMs"),
    CLOSE_TIME_MS((short)5, "closeTimeMs"),
    DURATION((short)6, "duration"),
    READ_SOURCE((short)7, "readSource");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FILE_ID
          return FILE_ID;
        case 2: // BLOCK_ID
          return BLOCK_ID;
        case 3: // SIZE_BYTE
          return SIZE_BYTE;
        case 4: // OPEN_TIME_MS
          return OPEN_TIME_MS;
        case 5: // CLOSE_TIME_MS
          return CLOSE_TIME_MS;
        case 6: // DURATION
          return DURATION;
        case 7: // READ_SOURCE
          return READ_SOURCE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __FILEID_ISSET_ID = 0;
  private static final int __BLOCKID_ISSET_ID = 1;
  private static final int __SIZEBYTE_ISSET_ID = 2;
  private static final int __OPENTIMEMS_ISSET_ID = 3;
  private static final int __CLOSETIMEMS_ISSET_ID = 4;
  private static final int __DURATION_ISSET_ID = 5;
  private static final int __READSOURCE_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FILE_ID, new org.apache.thrift.meta_data.FieldMetaData("fileId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BLOCK_ID, new org.apache.thrift.meta_data.FieldMetaData("blockId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SIZE_BYTE, new org.apache.thrift.meta_data.FieldMetaData("sizeByte", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.OPEN_TIME_MS, new org.apache.thrift.meta_data.FieldMetaData("openTimeMs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CLOSE_TIME_MS, new org.apache.thrift.meta_data.FieldMetaData("closeTimeMs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DURATION, new org.apache.thrift.meta_data.FieldMetaData("duration", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.READ_SOURCE, new org.apache.thrift.meta_data.FieldMetaData("readSource", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UserBlockAccessInfo.class, metaDataMap);
  }

  public UserBlockAccessInfo() {
  }

  public UserBlockAccessInfo(
    int fileId,
    long blockId,
    long sizeByte,
    long openTimeMs,
    long closeTimeMs,
    long duration,
    int readSource)
  {
    this();
    this.fileId = fileId;
    setFileIdIsSet(true);
    this.blockId = blockId;
    setBlockIdIsSet(true);
    this.sizeByte = sizeByte;
    setSizeByteIsSet(true);
    this.openTimeMs = openTimeMs;
    setOpenTimeMsIsSet(true);
    this.closeTimeMs = closeTimeMs;
    setCloseTimeMsIsSet(true);
    this.duration = duration;
    setDurationIsSet(true);
    this.readSource = readSource;
    setReadSourceIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UserBlockAccessInfo(UserBlockAccessInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.fileId = other.fileId;
    this.blockId = other.blockId;
    this.sizeByte = other.sizeByte;
    this.openTimeMs = other.openTimeMs;
    this.closeTimeMs = other.closeTimeMs;
    this.duration = other.duration;
    this.readSource = other.readSource;
  }

  public UserBlockAccessInfo deepCopy() {
    return new UserBlockAccessInfo(this);
  }

  @Override
  public void clear() {
    setFileIdIsSet(false);
    this.fileId = 0;
    setBlockIdIsSet(false);
    this.blockId = 0;
    setSizeByteIsSet(false);
    this.sizeByte = 0;
    setOpenTimeMsIsSet(false);
    this.openTimeMs = 0;
    setCloseTimeMsIsSet(false);
    this.closeTimeMs = 0;
    setDurationIsSet(false);
    this.duration = 0;
    setReadSourceIsSet(false);
    this.readSource = 0;
  }

  public int getFileId() {
    return this.fileId;
  }

  public UserBlockAccessInfo setFileId(int fileId) {
    this.fileId = fileId;
    setFileIdIsSet(true);
    return this;
  }

  public void unsetFileId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FILEID_ISSET_ID);
  }

  /** Returns true if field fileId is set (has been assigned a value) and false otherwise */
  public boolean isSetFileId() {
    return EncodingUtils.testBit(__isset_bitfield, __FILEID_ISSET_ID);
  }

  public void setFileIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FILEID_ISSET_ID, value);
  }

  public long getBlockId() {
    return this.blockId;
  }

  public UserBlockAccessInfo setBlockId(long blockId) {
    this.blockId = blockId;
    setBlockIdIsSet(true);
    return this;
  }

  public void unsetBlockId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BLOCKID_ISSET_ID);
  }

  /** Returns true if field blockId is set (has been assigned a value) and false otherwise */
  public boolean isSetBlockId() {
    return EncodingUtils.testBit(__isset_bitfield, __BLOCKID_ISSET_ID);
  }

  public void setBlockIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BLOCKID_ISSET_ID, value);
  }

  public long getSizeByte() {
    return this.sizeByte;
  }

  public UserBlockAccessInfo setSizeByte(long sizeByte) {
    this.sizeByte = sizeByte;
    setSizeByteIsSet(true);
    return this;
  }

  public void unsetSizeByte() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SIZEBYTE_ISSET_ID);
  }

  /** Returns true if field sizeByte is set (has been assigned a value) and false otherwise */
  public boolean isSetSizeByte() {
    return EncodingUtils.testBit(__isset_bitfield, __SIZEBYTE_ISSET_ID);
  }

  public void setSizeByteIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SIZEBYTE_ISSET_ID, value);
  }

  public long getOpenTimeMs() {
    return this.openTimeMs;
  }

  public UserBlockAccessInfo setOpenTimeMs(long openTimeMs) {
    this.openTimeMs = openTimeMs;
    setOpenTimeMsIsSet(true);
    return this;
  }

  public void unsetOpenTimeMs() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OPENTIMEMS_ISSET_ID);
  }

  /** Returns true if field openTimeMs is set (has been assigned a value) and false otherwise */
  public boolean isSetOpenTimeMs() {
    return EncodingUtils.testBit(__isset_bitfield, __OPENTIMEMS_ISSET_ID);
  }

  public void setOpenTimeMsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OPENTIMEMS_ISSET_ID, value);
  }

  public long getCloseTimeMs() {
    return this.closeTimeMs;
  }

  public UserBlockAccessInfo setCloseTimeMs(long closeTimeMs) {
    this.closeTimeMs = closeTimeMs;
    setCloseTimeMsIsSet(true);
    return this;
  }

  public void unsetCloseTimeMs() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CLOSETIMEMS_ISSET_ID);
  }

  /** Returns true if field closeTimeMs is set (has been assigned a value) and false otherwise */
  public boolean isSetCloseTimeMs() {
    return EncodingUtils.testBit(__isset_bitfield, __CLOSETIMEMS_ISSET_ID);
  }

  public void setCloseTimeMsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CLOSETIMEMS_ISSET_ID, value);
  }

  public long getDuration() {
    return this.duration;
  }

  public UserBlockAccessInfo setDuration(long duration) {
    this.duration = duration;
    setDurationIsSet(true);
    return this;
  }

  public void unsetDuration() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DURATION_ISSET_ID);
  }

  /** Returns true if field duration is set (has been assigned a value) and false otherwise */
  public boolean isSetDuration() {
    return EncodingUtils.testBit(__isset_bitfield, __DURATION_ISSET_ID);
  }

  public void setDurationIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DURATION_ISSET_ID, value);
  }

  public int getReadSource() {
    return this.readSource;
  }

  public UserBlockAccessInfo setReadSource(int readSource) {
    this.readSource = readSource;
    setReadSourceIsSet(true);
    return this;
  }

  public void unsetReadSource() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __READSOURCE_ISSET_ID);
  }

  /** Returns true if field readSource is set (has been assigned a value) and false otherwise */
  public boolean isSetReadSource() {
    return EncodingUtils.testBit(__isset_bitfield, __READSOURCE_ISSET_ID);
  }

  public void setReadSourceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __READSOURCE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case FILE_ID:
      if (value == null) {
        unsetFileId();
      } else {
        setFileId((Integer)value);
      }
      break;

    case BLOCK_ID:
      if (value == null) {
        unsetBlockId();
      } else {
        setBlockId((Long)value);
      }
      break;

    case SIZE_BYTE:
      if (value == null) {
        unsetSizeByte();
      } else {
        setSizeByte((Long)value);
      }
      break;

    case OPEN_TIME_MS:
      if (value == null) {
        unsetOpenTimeMs();
      } else {
        setOpenTimeMs((Long)value);
      }
      break;

    case CLOSE_TIME_MS:
      if (value == null) {
        unsetCloseTimeMs();
      } else {
        setCloseTimeMs((Long)value);
      }
      break;

    case DURATION:
      if (value == null) {
        unsetDuration();
      } else {
        setDuration((Long)value);
      }
      break;

    case READ_SOURCE:
      if (value == null) {
        unsetReadSource();
      } else {
        setReadSource((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case FILE_ID:
      return getFileId();

    case BLOCK_ID:
      return getBlockId();

    case SIZE_BYTE:
      return getSizeByte();

    case OPEN_TIME_MS:
      return getOpenTimeMs();

    case CLOSE_TIME_MS:
      return getCloseTimeMs();

    case DURATION:
      return getDuration();

    case READ_SOURCE:
      return getReadSource();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case FILE_ID:
      return isSetFileId();
    case BLOCK_ID:
      return isSetBlockId();
    case SIZE_BYTE:
      return isSetSizeByte();
    case OPEN_TIME_MS:
      return isSetOpenTimeMs();
    case CLOSE_TIME_MS:
      return isSetCloseTimeMs();
    case DURATION:
      return isSetDuration();
    case READ_SOURCE:
      return isSetReadSource();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof UserBlockAccessInfo)
      return this.equals((UserBlockAccessInfo)that);
    return false;
  }

  public boolean equals(UserBlockAccessInfo that) {
    if (that == null)
      return false;

    boolean this_present_fileId = true;
    boolean that_present_fileId = true;
    if (this_present_fileId || that_present_fileId) {
      if (!(this_present_fileId && that_present_fileId))
        return false;
      if (this.fileId != that.fileId)
        return false;
    }

    boolean this_present_blockId = true;
    boolean that_present_blockId = true;
    if (this_present_blockId || that_present_blockId) {
      if (!(this_present_blockId && that_present_blockId))
        return false;
      if (this.blockId != that.blockId)
        return false;
    }

    boolean this_present_sizeByte = true;
    boolean that_present_sizeByte = true;
    if (this_present_sizeByte || that_present_sizeByte) {
      if (!(this_present_sizeByte && that_present_sizeByte))
        return false;
      if (this.sizeByte != that.sizeByte)
        return false;
    }

    boolean this_present_openTimeMs = true;
    boolean that_present_openTimeMs = true;
    if (this_present_openTimeMs || that_present_openTimeMs) {
      if (!(this_present_openTimeMs && that_present_openTimeMs))
        return false;
      if (this.openTimeMs != that.openTimeMs)
        return false;
    }

    boolean this_present_closeTimeMs = true;
    boolean that_present_closeTimeMs = true;
    if (this_present_closeTimeMs || that_present_closeTimeMs) {
      if (!(this_present_closeTimeMs && that_present_closeTimeMs))
        return false;
      if (this.closeTimeMs != that.closeTimeMs)
        return false;
    }

    boolean this_present_duration = true;
    boolean that_present_duration = true;
    if (this_present_duration || that_present_duration) {
      if (!(this_present_duration && that_present_duration))
        return false;
      if (this.duration != that.duration)
        return false;
    }

    boolean this_present_readSource = true;
    boolean that_present_readSource = true;
    if (this_present_readSource || that_present_readSource) {
      if (!(this_present_readSource && that_present_readSource))
        return false;
      if (this.readSource != that.readSource)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_fileId = true;
    list.add(present_fileId);
    if (present_fileId)
      list.add(fileId);

    boolean present_blockId = true;
    list.add(present_blockId);
    if (present_blockId)
      list.add(blockId);

    boolean present_sizeByte = true;
    list.add(present_sizeByte);
    if (present_sizeByte)
      list.add(sizeByte);

    boolean present_openTimeMs = true;
    list.add(present_openTimeMs);
    if (present_openTimeMs)
      list.add(openTimeMs);

    boolean present_closeTimeMs = true;
    list.add(present_closeTimeMs);
    if (present_closeTimeMs)
      list.add(closeTimeMs);

    boolean present_duration = true;
    list.add(present_duration);
    if (present_duration)
      list.add(duration);

    boolean present_readSource = true;
    list.add(present_readSource);
    if (present_readSource)
      list.add(readSource);

    return list.hashCode();
  }

  @Override
  public int compareTo(UserBlockAccessInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetFileId()).compareTo(other.isSetFileId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileId, other.fileId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBlockId()).compareTo(other.isSetBlockId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBlockId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.blockId, other.blockId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSizeByte()).compareTo(other.isSetSizeByte());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSizeByte()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sizeByte, other.sizeByte);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOpenTimeMs()).compareTo(other.isSetOpenTimeMs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOpenTimeMs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.openTimeMs, other.openTimeMs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCloseTimeMs()).compareTo(other.isSetCloseTimeMs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCloseTimeMs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.closeTimeMs, other.closeTimeMs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDuration()).compareTo(other.isSetDuration());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDuration()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.duration, other.duration);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReadSource()).compareTo(other.isSetReadSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReadSource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.readSource, other.readSource);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("UserBlockAccessInfo(");
    boolean first = true;

    sb.append("fileId:");
    sb.append(this.fileId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("blockId:");
    sb.append(this.blockId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sizeByte:");
    sb.append(this.sizeByte);
    first = false;
    if (!first) sb.append(", ");
    sb.append("openTimeMs:");
    sb.append(this.openTimeMs);
    first = false;
    if (!first) sb.append(", ");
    sb.append("closeTimeMs:");
    sb.append(this.closeTimeMs);
    first = false;
    if (!first) sb.append(", ");
    sb.append("duration:");
    sb.append(this.duration);
    first = false;
    if (!first) sb.append(", ");
    sb.append("readSource:");
    sb.append(this.readSource);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UserBlockAccessInfoStandardSchemeFactory implements SchemeFactory {
    public UserBlockAccessInfoStandardScheme getScheme() {
      return new UserBlockAccessInfoStandardScheme();
    }
  }

  private static class UserBlockAccessInfoStandardScheme extends StandardScheme<UserBlockAccessInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, UserBlockAccessInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FILE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.fileId = iprot.readI32();
              struct.setFileIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BLOCK_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.blockId = iprot.readI64();
              struct.setBlockIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SIZE_BYTE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.sizeByte = iprot.readI64();
              struct.setSizeByteIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // OPEN_TIME_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.openTimeMs = iprot.readI64();
              struct.setOpenTimeMsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CLOSE_TIME_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.closeTimeMs = iprot.readI64();
              struct.setCloseTimeMsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DURATION
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.duration = iprot.readI64();
              struct.setDurationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // READ_SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.readSource = iprot.readI32();
              struct.setReadSourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, UserBlockAccessInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(FILE_ID_FIELD_DESC);
      oprot.writeI32(struct.fileId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BLOCK_ID_FIELD_DESC);
      oprot.writeI64(struct.blockId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SIZE_BYTE_FIELD_DESC);
      oprot.writeI64(struct.sizeByte);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OPEN_TIME_MS_FIELD_DESC);
      oprot.writeI64(struct.openTimeMs);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CLOSE_TIME_MS_FIELD_DESC);
      oprot.writeI64(struct.closeTimeMs);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DURATION_FIELD_DESC);
      oprot.writeI64(struct.duration);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(READ_SOURCE_FIELD_DESC);
      oprot.writeI32(struct.readSource);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UserBlockAccessInfoTupleSchemeFactory implements SchemeFactory {
    public UserBlockAccessInfoTupleScheme getScheme() {
      return new UserBlockAccessInfoTupleScheme();
    }
  }

  private static class UserBlockAccessInfoTupleScheme extends TupleScheme<UserBlockAccessInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, UserBlockAccessInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetFileId()) {
        optionals.set(0);
      }
      if (struct.isSetBlockId()) {
        optionals.set(1);
      }
      if (struct.isSetSizeByte()) {
        optionals.set(2);
      }
      if (struct.isSetOpenTimeMs()) {
        optionals.set(3);
      }
      if (struct.isSetCloseTimeMs()) {
        optionals.set(4);
      }
      if (struct.isSetDuration()) {
        optionals.set(5);
      }
      if (struct.isSetReadSource()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetFileId()) {
        oprot.writeI32(struct.fileId);
      }
      if (struct.isSetBlockId()) {
        oprot.writeI64(struct.blockId);
      }
      if (struct.isSetSizeByte()) {
        oprot.writeI64(struct.sizeByte);
      }
      if (struct.isSetOpenTimeMs()) {
        oprot.writeI64(struct.openTimeMs);
      }
      if (struct.isSetCloseTimeMs()) {
        oprot.writeI64(struct.closeTimeMs);
      }
      if (struct.isSetDuration()) {
        oprot.writeI64(struct.duration);
      }
      if (struct.isSetReadSource()) {
        oprot.writeI32(struct.readSource);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, UserBlockAccessInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.fileId = iprot.readI32();
        struct.setFileIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.blockId = iprot.readI64();
        struct.setBlockIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.sizeByte = iprot.readI64();
        struct.setSizeByteIsSet(true);
      }
      if (incoming.get(3)) {
        struct.openTimeMs = iprot.readI64();
        struct.setOpenTimeMsIsSet(true);
      }
      if (incoming.get(4)) {
        struct.closeTimeMs = iprot.readI64();
        struct.setCloseTimeMsIsSet(true);
      }
      if (incoming.get(5)) {
        struct.duration = iprot.readI64();
        struct.setDurationIsSet(true);
      }
      if (incoming.get(6)) {
        struct.readSource = iprot.readI32();
        struct.setReadSourceIsSet(true);
      }
    }
  }

}

